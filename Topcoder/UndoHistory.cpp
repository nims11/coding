#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class UndoHistory {
public:
	int minPresses(vector <string> lines) {
		int ret = lines[0].size()+1;set<string> undo;
		undo.insert("");
		string buff = "";
		for(int i=0;i<lines[0].size();i++)
		{
			buff.push_back(lines[0][i]);
			undo.insert(buff);
		}

		for(int i=1;i<lines.size();i++)
		{
			int op2 = -1;
			if(buff.length() <= lines[i].length() && buff == lines[i].substr(0, buff.length()))
            {
                op2 = 1 + lines[i].length() - buff.length();
            }
			int op3 = -1;
			int j = 0;
			string tmp = "";
			while(j<=lines[i].length() && undo.find(tmp) != undo.end())
			{
				j++;
				tmp.push_back(lines[i][j-1]);
			}
			if(j != 0)
			{
				op3 = 4 + lines[i].length() - tmp.length();
			}
			if(op2 == -1 || op3<op2)
			{
			    tmp = tmp.substr(0, tmp.length()-1);
				for(int j=tmp.length();j<lines[i].length();j++)
				{
					tmp.push_back(lines[i][j]);
					undo.insert(tmp);
				}
				ret += op3;
				buff = lines[i];
			}else
			{
				for(int j = buff.length();j<lines[i].length();j++)
				{
					buff.push_back(lines[i][j]);
					undo.insert(buff);
				}
				ret += op2;
			}
		}
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	UndoHistory *obj;
	int answer;
	obj = new UndoHistory();
	clock_t startTime = clock();
	answer = obj->minPresses(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	{
	// ----- test 0 -----
	string t0[] = {"tomorrow","topcoder"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 18;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"a","b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"a","ab","abac","abacus"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"pyramid","sphinx","sphere","python","serpent"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 39;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"ba","a","a","b","ba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
