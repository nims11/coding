#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
struct node{
    int hash;
    string str;
    int times;
    node(int a, string s, int b):hash(a), str(s), times(b){}
};

class SmartWordToy {
	set<int> not_allowed;
	int pos[5];
	int visited[500000];
	int hash(string &str)
	{
	    int ret = 0;
	    for(int i=0;i<4;i++)
            ret = ret*26 + str[i] - 'a';
        return ret;
	}
	void gen(string &str, int p, int cur)
	{
	    if(p == 4)
        {
            visited[cur] = 1;
            return;
        }
	    for(int i=pos[p];i<pos[p+1]-1;i++)
        {
            gen(str, p+1, cur*26+str[i]-'a');
        }
	}
public:
	int minPresses(string start, string finish, vector <string> forbid) {
	    for(int i=0;i<500000;i++)
            visited[i] = 0;
	    for(int i=0;i<forbid.size();i++)
        {
            pos[0] = 0;
            pos[4] = forbid[i].length()+1;
            int x = 1;
            for(int j=0;j<forbid[i].size();j++)
            {
                if(forbid[i][j] == ' ')
                    pos[x++] = j+1;
            }
            gen(forbid[i], 0, 0);
        }
        int st = hash(start), end = hash(finish);

        queue<node> BFS;
        BFS.push(node(st, start, 0));
        if(visited[st] || visited[end])
            return -1;
        visited[st] = 1;
        while(!BFS.empty())
        {
            node x = BFS.front();
            BFS.pop();
            if(x.hash == end)
                return x.times;
            for(int i=0;i<4;i++)
            {
                string xx = x.str;
                xx[i]++;
                if(xx[i] > 'z')
                    xx[i] = 'a';
                int xx_hash = hash(xx);
                if(!visited[xx_hash])
                    visited[xx_hash] = 1, BFS.push(node(xx_hash, xx, x.times+1));
                xx = x.str;
                xx[i]--;
                if(xx[i] < 'a')
                    xx[i] = 'z';
                xx_hash = hash(xx);
                if(!visited[xx_hash])
                    visited[xx_hash] = 1, BFS.push(node(xx_hash, xx, x.times+1));
            }
        }
        return -1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, vector <string> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SmartWordToy *obj;
	int answer;
	obj = new SmartWordToy();
	clock_t startTime = clock();
	answer = obj->minPresses(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	vector <string> p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = "aaaa";
	p1 = "zzzz";
	string t2[] = {"a a a z","a a z a","a z a a","z a a a","a z z z","z a z z","z z a z","z z z a"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 8;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "aaaa";
	p1 = "bbbb";
	p2.clear() /*{}*/;
	p3 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "aaaa";
	p1 = "mmnn";
	p2.clear() /*{}*/;
	p3 = 50;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "aaaa";
	p1 = "zzzz";
	string t2[] = {"bz a a a","a bz a a","a a bz a","a a a bz"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "aaaa";
	p1 = "zzzz";
	string t2[] = {"cdefghijklmnopqrstuvwxyz a a a","a cdefghijklmnopqrstuvwxyz a a","a a cdefghijklmnopqrstuvwxyz a","a a a cdefghijklmnopqrstuvwxyz"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 6;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = "aaaa";
	p1 = "bbbb";
	string t2[] = {"b b b b"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 6 -----
	p0 = "zzzz";
	p1 = "aaaa";
	string t2[] = {"abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefg"
			"hijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl a"
			"bcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk","abcdefghijkl abcdefghijkl abcdefghijkl abcdefghijk"};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
