#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PolygonTraversal2 {
public:
	bool status[14];
	vector<pair<int, int> > paths;
	int n;
	int ans;
	int rem;
	int st;
	void brute(int x)
	{
		if(rem == 1)
		{
			for(int j=0;j<paths.size();j++)
				{
					int a,b;
					if(paths[j].first<paths[j].second)
						a = paths[j].first, b = paths[j].second;
					else
						b = paths[j].first, a = paths[j].second;
					
					if((a<st && st<b && !(a<=x && x<=b)) || (a<x && x<b && !(a<=st && st<=b)))
					{
						ans++;
						return;
					}
				}
				return;
		}
		for(int i=1;i<=n;i++)
			if(!status[i] && i!=st)
			{
				for(int j=0;j<paths.size();j++)
				{
					int a,b;
					if(paths[j].first<paths[j].second)
						a = paths[j].first, b = paths[j].second;
					else
						b = paths[j].first, a = paths[j].second;
					
					if((a<i && i<b && !(a<=x && x<=b)) || (a<x && x<b && !(a<=i && i<=b)))
					{
						rem--;
						paths.push_back(make_pair(x, i));
						status[i] = true;
						brute(i);
						status[i] = false;
						paths.pop_back();
						rem++;
						break;
					}
				}
			}
	}
	int count(int N, vector <int> points) {
		n=N;
		for(int i=0;i<=n;i++)
			status[i] = false;
		ans = 0;
		rem = n;
		for(int i=1;i<points.size();i++)
		{
			rem--;
			status[points[i]] = true;
			paths.push_back(make_pair(points[i-1], points[i]));
		}
		st = points[0];
		brute(points[points.size()-1]);
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	PolygonTraversal2 *obj;
	int answer;
	obj = new PolygonTraversal2();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 5;
	int t1[] = {1,3,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 6;
	int t1[] = {1,4,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 7;
	int t1[] = {2,4,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	int t1[] = {1,2,3,4,6,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 11;
	int t1[] = {1,5,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1412;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
