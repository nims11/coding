#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SurveillanceSystem {
public:
	string getContainerInfo(string containers, vector <int> reports, int L) {
		map<int, int> bar;
		map<int, int>::iterator it;;
		for(int i=0;i<reports.size();i++)
        {
            it = bar.find(reports[i]);
            if(it != bar.end())
                it->second++;
            else
                bar[reports[i]] = 1;
        }
		int N = containers.length();
		int F[N][L+1];
		string ret = "";
		for(int i=0;i<N;i++)
            ret.push_back('-');

		int tot[L+1];

		for(int i=0;i<=L;i++)
            tot[i] = 0;
        int pre[N+1];
        int foo[N];
        pre[0] = 0;

        for(int i=1;i<=N;i++)
            pre[i] = pre[i-1]+(containers[i-1]=='X');

        for(int i=L-1;i<N;i++)
            foo[i] = pre[i+1]-pre[i-L+1];

        for(int i=L-1;i<N;i++)
            tot[pre[i+1]-pre[i-L+1]]++;

        for(int i=0;i<N;i++)
        {
            for(int j=0;j<=L;j++)
            {
                F[i][j] = 0;
                for(int k=max(L-1, i);k<min(N, i+L); k++)
                {
                    if(foo[k] == j)
                        F[i][j]++;
                }
                F[i][j] = tot[j]-F[i][j];
            }
        }
        for(it = bar.begin(); it!=bar.end(); it++)
        {
            int x = it->first;
            int y = it->second;
            for(int j=0;j<N;j++)
            {
                if(F[j][x]<y)
                    ret[j] = '+';
                else if(ret[j] == '-' && F[j][x] != tot[x])
                    ret[j] = '?';
            }
        }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	SurveillanceSystem *obj;
	string answer;
	obj = new SurveillanceSystem();
	clock_t startTime = clock();
	answer = obj->getContainerInfo(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	vector <int> p1;
	int p2;
	string p3;

	{
	// ----- test 0 -----
	p0 = "-X--XX";
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?++++";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "-XXXXX-";
	int t1[] = {2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?" "?";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "------X-XX-";
	int t1[] = {3,0,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = "++++++++++?";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "-XXXXX---X--";
	int t1[] = {2,1,0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = "?" "?" "?-?" "?++++?" "?";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = "-XX--X-XX-X-X--X---XX-X---XXXX-----X";
	int t1[] = {3,3,3,3,3,3,3,3,3,3,3,3,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	p3 = "?" "?" "?++++?++++++++++++++++++++?" "?" "?" "?" "?" "?--";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
