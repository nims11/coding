#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SpaceWarDiv1 {
public:
    bool chk(vector<long long> &tmp, long long x)
    {
        long long curr = 0;
        for(int i=tmp.size()-1; i>=0 ;i--)
        {
            curr -= x;
            curr += tmp[i];
            if(curr>0)
                return false;
        }
        return true;
    }
	long long minimalFatigue(vector <int> magicalGirlStrength, vector <int> enemyStrength, vector <long long> enemyCount) {
		sort(magicalGirlStrength.begin(), magicalGirlStrength.end());
		if(magicalGirlStrength.back() < *max_element(enemyStrength.begin(), enemyStrength.end()))
            return -1;
        vector<long long> tmp(magicalGirlStrength.size(), 0);
        for(int i=0;i<enemyStrength.size();i++)
        {
            int pos = int(lower_bound(magicalGirlStrength.begin(), magicalGirlStrength.end(), enemyStrength[i]) - magicalGirlStrength.begin());
            tmp[pos] += enemyCount[i];
        }
        long long start = 0, end = 10000000000000000LL;
        while(start<end)
        {
            long long mid = (start + end)/2;
            if(chk(tmp, mid))
            {
                end = mid;
            }else
            {
                start = mid + 1;
            }
        }
        return end;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <long long> p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	SpaceWarDiv1 *obj;
	long long answer;
	obj = new SpaceWarDiv1();
	clock_t startTime = clock();
	answer = obj->minimalFatigue(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <long long> p2;
	long long p3;

	{
	// ----- test 0 -----
	int t0[] = {2,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	long long t2[] = {2ll,9ll,4ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 7ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {2,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	long long t2[] = {2ll,9ll,4ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 5ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {14,6,22};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {8,33};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	long long t2[] = {9ll,1ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {869,249,599,144,929,748,665,37,313,99,33,437,308,137,665,834,955,958,613,417};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {789,57,684,741,128,794,542,367,937,739,568,872,127,261,103,763,864,360,618,307};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	long long t2[] = {20626770196420ll,45538527263992ll,52807114957507ll,17931716090785ll,65032910980630ll,88711853198687ll,26353250637092ll,61272534748707ll,89294362230771ll,52058590967576ll,60568594469453ll,23772707032338ll,43019142889727ll,39566072849912ll,78870845257173ll,68135668032761ll,36844201017584ll,10133804676521ll,6275847412927ll,37492167783296ll};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 75030497287405ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
