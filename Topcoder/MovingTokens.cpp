#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


set<unsigned long long> states;
set<unsigned long long> new_states;
set<unsigned long long> newer_states;
class MovingTokens {
    public:
        int move(int n, int m, vector <int> moves) {
            states.clear();
            new_states.clear();
            newer_states.clear();
            states.insert((1LL<<n)-1);
            new_states.insert((1LL<<n)-1);
            while(true){
                int cur_size = states.size();
                for(unsigned long long state: new_states)
                    states.insert(state);
                for(unsigned long long state: new_states){
                    for(int j = 0;j<m;j++){
                        long long new_state = 0;
                        for(int i = 0;i<n;i++){
                            int i2 = moves[j*n+i];
                            if(state & (1LL<<i))
                                new_state |= (1LL<<i2);
                        }
                        if(states.find(new_state) == states.end()){
                            newer_states.insert(new_state);
                        }
                    }
                }
                new_states.clear();
                for(unsigned long long state: newer_states)
                    new_states.insert(state);
                newer_states.clear();
                if(new_states.size() == 0)
                    break;
            }
            int ans  = 100;
            for(unsigned long long state: states)
                ans = min(ans, __builtin_popcountll(state));
            return ans;
        }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}";
    cout << "]" << endl;
    MovingTokens *obj;
    int answer;
    obj = new MovingTokens();
    clock_t startTime = clock();
    answer = obj->move(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <int> p2;
    int p3;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = 2;
        int t2[] = {0,1,0,1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 2;
        p1 = 2;
        int t2[] = {0,0,1,1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 3;
        p1 = 1;
        int t2[] = {0,1,1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 2;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 2;
        p1 = 5;
        int t2[] = {0,0,0,0,0,0,1,1,1,1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 3;
        p1 = 2;
        int t2[] = {0,2,2,1,1,0};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = 1;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
