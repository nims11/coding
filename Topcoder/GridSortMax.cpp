#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

void swaprow(vector<int> &grid, int r1, int r2, int n, int m){
    for(int j = 0;j<m;j++){
        swap(grid[r1*m+j], grid[r2*m+j]);
    }
}

void swapcol(vector<int> &grid, int r1, int r2, int n, int m){
    for(int j = 0;j<n;j++){
        swap(grid[j*m+r1], grid[j*m+r2]);
    }
}

string getstr(vector<int> &grid){
    string ret = "";
    for(int i = 0;i<grid.size();i++)
        ret += (grid[i] == i+1?"1":"0");
    return ret;
}
class GridSortMax {
    public:
        string findMax(int n, int m, vector <int> grid) {
            vector<int> fixedrows(n);
            vector<int> fixedcols(m);
            for(int i = 0;i<n;i++)
                fixedrows[i] = 0;
            for(int i = 0;i<m;i++)
                fixedcols[i] = 0;

            int cur_min = 1;
            for(int z = 0;z<n;z++, cur_min += m){
                for(int xx = 0;xx<m;xx++){
                    pair<int, int> cur_candidate = {-1, -1};
                    for(int i = 0;i<n;i++){
                        for(int j = 0;j<m;j++){
                            if(grid[i*m+j] >= cur_min && grid[i*m+j] < cur_min+m){
                                if(cur_candidate.first != -1 && grid[cur_candidate.first*m+cur_candidate.second] < grid[i*m+j]) continue;
                                int target_col = grid[i*m+j] - cur_min;
                                if(target_col == j && i == z && (!fixedrows[z] || !fixedcols[j])){
                                    cur_candidate = {i, j};
                                    continue;
                                }
                                if((target_col != j && (fixedcols[target_col] || fixedcols[j]))
                                        || (i != z && (fixedrows[i] || fixedrows[z])) || (target_col == j && i == z)) continue;
                                cur_candidate = {i, j};
                            }
                        }
                    }
                    if(cur_candidate.first != -1){
                        int target_col = grid[cur_candidate.first*m+cur_candidate.second] - cur_min;
                        swaprow(grid, z, cur_candidate.first, n, m);
                        swapcol(grid, target_col, cur_candidate.second, n, m);
                        fixedrows[z] = 1;
                        fixedcols[target_col] = 1;
                    }
                }
            }
            return getstr(grid);
        }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, string p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}";
    cout << "]" << endl;
    GridSortMax *obj;
    string answer;
    obj = new GridSortMax();
    clock_t startTime = clock();
    answer = obj->findMax(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p3 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    int p0;
    int p1;
    vector <int> p2;
    string p3;

    {
        // ----- test 0 -----
        p0 = 2;
        p1 = 2;
        int t2[] = {1,2,3,4};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "1111";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 2;
        p1 = 2;
        int t2[] = {2,1,3,4};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "1100";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 2;
        p1 = 2;
        int t2[] = {4,2,3,1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "1001";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 1;
        p1 = 10;
        int t2[] = {10,6,2,3,5,7,1,9,4,8};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "1111111111";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 3;
        p1 = 5;
        int t2[] = {5,2,10,7,9,3,4,14,11,1,15,12,6,8,13};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "101100100100000";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        p0 = 6;
        p1 = 2;
        int t2[] = {3,9,5,1,10,6,2,7,8,11,12,4};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        p3 = "100000101010";
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
