#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheLargestString {
public:
    int find_max(string &s, int idx)
    {
        int max_i = idx;
        for(int i=idx+1;i<s.length();i++)
            if(s[i]>s[max_i])
                max_i = i;
        return max_i;
    }
	string find(string s, string t) {
		int max_i = find_max(s, 0);

		vector<int> ans;
		for(int i=0;i<s.length();i++)
			if(s[i] == s[max_i])
				ans.push_back(i);

		int cur = ans.size(), maxx = cur;
		vector<int> stage, commit;
		for(int i=0;i<ans.size();i++)
		{
			if(t[ans[i]] == s[max_i])
			{
				cur++;
			}else
			{
				cur--;stage.push_back(ans[i]);
			}
			if(cur>maxx)
			{
				maxx = cur;
				for(int j=0;j<stage.size();j++)
					commit.push_back(stage[j]);
				stage.clear();
			}
		}
		vector<int> final;
		
		bool flag = false;
		for(int i=0;i<ans.size();i++)
		{
			if(!binary_search(commit.begin(), commit.end(), ans[i]))
			{
				final.push_back(ans[i]);
				if(t[ans[i]] >= s[ans[i]])
				flag = true;
			}
		}
		int i=final.back()+1;
		if(!flag)
		for(;i<s.length();)
		{
		    int x = find_max(s, i);
		    i = x;
			if(s[x]>=t[final.front()])
			final.push_back(i);
			i++;
		}
		string ret;
		for(int i=0;i<final.size();i++)
		ret.push_back(s[final[i]]);
		for(int i=0;i<final.size();i++)
		ret.push_back(t[final[i]]);
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	TheLargestString *obj;
	string answer;
	obj = new TheLargestString();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "ab";
	p1 = "zy";
	p2 = "by";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "abacaba";
	p1 = "zzzaaaa";
	p2 = "cbaaaa";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "x";
	p1 = "x";
	p2 = "xx";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "abbabbabbababaaaabbababab";
	p1 = "bababbaabbbababbbbababaab";
	p2 = "bbbbbbbbbbbbbbbbbbaaab";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
