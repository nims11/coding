
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheNumberGameDiv2 {
public:
		vector<int> a, b;

    bool eq(vector<int> &a, vector<int> &b)
    {
        for(int i=0;i<a.size();i++)
        {
            if(a[i] != b[i])
                return false;
        }
        return true;
    }
    int x;
	int getans(vector<int> a, bool rev = false)
	{
//	    for(int i=0;i<a.size();i++)
//            cout<<a[i];
//        cout<<endl;
//        cout<<eq(a,b)<<endl<<endl;
//        cin>>x;

		if(a.size() == b.size() && eq(a, b)) return 0;
		if(a.size()<b.size())return -1;
		int tmp = a.back();
		a.pop_back();
		int case1=-1, case2=-1;
		case1 = getans(a);
		if(!rev){
		a.push_back(tmp);
		reverse(a.begin(), a.end());
		case2 = getans(a, true);
		}
		if(case1 == -1 && case2 == -1)
			return -1;

		int res = 1000000;
		if(case1 != -1)
		res = case1+1;
		if(case2 != -1)
		res = min(res, case2+1);

		return res;

	}
	int minimumMoves(int A, int B) {
		while(A)
		{
			a.push_back(A%10);
			A/=10;
		}
		while(B)
		{
			b.push_back(B%10);
			B/=10;
		}
		reverse(a.begin(), a.end());reverse(b.begin(), b.end());
		return getans(a);
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	TheNumberGameDiv2 *obj;
	int answer;
	obj = new TheNumberGameDiv2();
	clock_t startTime = clock();
	answer = obj->minimumMoves(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 25;
	p1 = 5;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5162;
	p1 = 16;
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 334;
	p1 = 12;
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 218181918;
	p1 = 9181;
	p2 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 9798147;
	p1 = 79817;
	p2 = -1;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
