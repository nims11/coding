#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int getans(vector<int> &S, int D){
	int dp[S.size()];
	dp[0] = 0;
	for(int i = 1;i<S.size();i++){
		dp[i] = dp[i-1];
		if(S[i]-S[i-1]<=D){
			dp[i] = max(dp[i], 1+(i-2>=0?dp[i-2]:0));
		}
	}
	return dp[S.size()-1];
}

class EllysSocks {
public:
	int getDifference(vector <int> S, int P) {
		sort(S.begin(), S.end());
		int st = 0, end = 1000000000;
		while(st < end){
			int mid = (st + end)/2;
			if(getans(S, mid) >= P)
				end = mid;
			else
				st = mid+1;
		}
		return end;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	EllysSocks *obj;
	int answer;
	obj = new EllysSocks();
	clock_t startTime = clock();
	answer = obj->getDifference(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {42,37,84,36,41,42};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {42,37,84,36,41,42};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 42;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {5,2,8,8,6,7,3,7,4,2,4,5,3,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {17,3,13,3,2,17,11,5,5,7,11,7,13,19};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 4;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {795755685,581869303,404620563,708632712,545404205,133711906,372047868,949333986,579004999,323567404,418932836,944672732,196140741,809094427,946129058,30574577,182506778,15198493,150802600,138749191,676943010,177512688,126303054,81133258,183966551,471852627,84672537,867128744,857788837,275731772,609397213,20544910,811450930,483031419,361913171,547204602,892462744,522136404,173978710,131752569,478582453,867889991,153380496,551745921,647984700,910208077,283496852,368550363,379821990,712568903,40498239,113911604,103237637,39073007,684602223,812852787,479711181,746745228,735241235,296707007,262522458,870676136,136721027,359573809,189375153,547914047,198304613,640439653,417177802,25475624,758242872,764919655,310701088,537655880,361931892,14685971,213794688,107063881,147944789,444803289,884392679,540721924,638781100,902841101,7097711,219972874,879609715,156513984,802611721,755486970,103522060,967048445,913778155,94092596,519074050,884870761,248268555,339840186,53612697,826647953};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 42;
	p2 = 12866316;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
