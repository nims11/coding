#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FoxAndChess {
public:
	string ableToMove(string begin, string target) {
		vector<pair<char, int> > evt1, evt2;
		for(int i = 0; i<begin.size(); i++)
        {
            if(begin[i] != '.')
                evt1.push_back(make_pair(begin[i], i));
            if(target[i] != '.')
                evt2.push_back(make_pair(target[i], i));
        }
        if(evt1.size() != evt2.size())
            return "Impossible";
        for(int i = 0; i< evt1.size(); i++)
            if(evt1[i].first != evt2[i].first)
                return "Impossible";
        for(int i = 0; i< evt1.size(); i++)
        {
            if(evt1[i].first == 'L')
            {
                if(evt1[i].second == evt2[i].second)
                    continue;
                if(evt1[i].second > evt2[i].second)
                {
                    if(i == 0 || evt1[i-1].second < evt2[i].second)
                    {
                        evt1[i].second = evt2[i].second;
                    }else
                        return "Impossible";
                }else
                {
                    return "Impossible";
                }
            }
        }
        for(int i = ((int)evt1.size())-1; i>=0; i--)
        {
            if(evt1[i].first == 'R')
            {
                if(evt1[i].second == evt2[i].second)
                    continue;
                if(evt1[i].second < evt2[i].second)
                {
                    if(i == evt1.size()-1 || evt1[i+1].second > evt2[i].second)
                    {
                        evt1[i].second = evt2[i].second;
                    }else
                        return "Impossible";
                }else
                {
                    return "Impossible";
                }
            }
        }
        return "Possible";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	FoxAndChess *obj;
	string answer;
	obj = new FoxAndChess();
	clock_t startTime = clock();
	answer = obj->ableToMove(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "R...";
	p1 = "..R.";
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "..R.";
	p1 = "R...";
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = ".L.R.R.";
	p1 = "L...R.R";
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = ".L.R.";
	p1 = ".R.L.";
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "LRLLRLRLLRLLRLRLRL";
	p1 = "LRLLRLRLLRLLRLRLRL";
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "L";
	p1 = ".";
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = ".LL.";
	p1 = "LL..";
	all_right = KawigiEdit_RunTest(6, p0, p1, false, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
