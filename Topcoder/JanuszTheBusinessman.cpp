#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

struct evt{
	int type;
	int t;
	int v;
	friend bool operator<(const evt &a, const evt &b){
		if(a.t != b.t)return a.t<b.t;
		if(a.type != b.type)return a.type<b.type;
	}
};
class JanuszTheBusinessman {
public:
	int makeGuestsReturn(vector <int> arrivals, vector <int> departures) {
		int status[arrivals.size()];
		int N = arrivals.size();
		for(int i = 0;i<N;i++)
			status[i] = 0;
		int res = 0;
		vector<evt> fo;
		for(int i = 0;i<N;i++){
			evt tmp;
			tmp.type = 0;
			tmp.t = arrivals[i];
			tmp.v = i;
			fo.push_back(tmp);
			tmp.type = 1;
			tmp.t = departures[i];
			tmp.v = i;
			fo.push_back(tmp);
		}
		sort(fo.begin(), fo.end());
		set<int> cur;
		bool curRec = false;
		int curRecSize = 0;
		for(int i = 0;i<fo.size();i++){
			if(fo[i].type == 0){
				cur.insert(fo[i].v);
				if(curRecSize)
					status[fo[i].v] = 1;
			}else{
				if(!curRecSize && status[fo[i].v] == 0){
					res++;
					curRecSize = cur.size();
					for(set<int>::iterator it = cur.begin(); it != cur.end();it++)
						status[*it] = 2;
				}
				if(status[fo[i].v] == 2)
					curRecSize--;
				cur.erase(fo[i].v);
			}
		}
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	JanuszTheBusinessman *obj;
	int answer;
	obj = new JanuszTheBusinessman();
	clock_t startTime = clock();
	answer = obj->makeGuestsReturn(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {2,10,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {6,11,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2,10,23,34,45,123,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {25,12,40,50,48,187,365};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {8,12,20,30,54,54,68,75};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {13,31,30,53,55,70,80,76};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {124,328,135,234,347,124,39,99,116,148};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {237,335,146,246,353,213,197,215,334,223};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {154,1,340,111,92,237,170,113,241,91,228,134,191,86,59,115,277,328,12,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {159,4,341,118,101,244,177,123,244,96,231,136,193,95,64,118,282,330,17,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 14;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
