#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

long long tot[20];
string getans(int len, int K, int start=0){
	//cout<<len<<" "<<K<<endl;
	if(len == 0)
		return "";
	if(len == 1)
		return string(1, '0'+start+K);
	int cur = 0;
	for(;start<10;start++, cur += tot[len]/9){
		if(cur > K)
			break;
	}
	start--;
	return string(1, '0'+start)+getans(len-2, K-(cur-tot[len]/9))+string(1, '0'+start);
}
long long toLL(string str)
{
	long long ret = 0;
	for(int i = 0;i<str.length();i++)
	ret = ret*10 + str[i]-'0';
	return ret;
}
class IntegerPalindrome {
public:
	long long findByIndex(int K) {
		tot[0] = 0;
		tot[1] = 9;
		for(int i = 2;i<20;i++)
			if(i%2)tot[i] = tot[i-1]*10;
			else tot[i] = tot[i-1];
		int cur, idx;
		for(idx = 0, cur=tot[0];idx<20;cur += tot[++idx])
			if(cur > K)break;
		return toLL(getans(idx, K-(cur-tot[idx]), 1));
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	IntegerPalindrome *obj;
	long long answer;
	obj = new IntegerPalindrome();
	clock_t startTime = clock();
	answer = obj->findByIndex(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = 8;
	p1 = 9ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 9;
	p1 = 11ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 19;
	p1 = 111ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 235;
	p1 = 13731ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 23746;
	p1 = 137484731ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
