#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Conditional {
public:
	double probability(int nDice, int maxSide, int v, int theSum) {
	    int maxSum = nDice*maxSide;
		double dp[nDice+1][maxSum+1][2];
		for(int i = 0;i<=nDice;i++)
            for(int j = 0;j<=maxSum;j++)
                dp[i][j][0] = dp[i][j][1] = 0;
		for(int i = 1;i<=maxSide;i++){
            if(i != v)
                dp[1][i][0] = 1, dp[1][i][1] = 0;
            else
                dp[1][i][0] = 0, dp[1][i][1] = 1;
		}
		for(int i = 2;i<=nDice;i++){
            for(int j = 1;j<=maxSide;j++){
                for(int k = j;k<=maxSum;k++){
                    if(j!=v){
                        dp[i][k][0] += dp[i-1][k-j][0];
                        dp[i][k][1] += dp[i-1][k-j][1];
                    }else{
                        dp[i][k][1] += dp[i-1][k-j][1]+dp[i-1][k-j][0];
                    }
                }
            }
		}
		double num = 0, den = 0;
		for(int i= theSum;i<=maxSum;i++)
            num += dp[nDice][i][1];
        for(int i = 0;i<=maxSum;i++){
//            cout<<dp[nDice][i][1]<<" ";
            den += dp[nDice][i][1];
        }
//        cout<<endl;
        return num/den;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	Conditional *obj;
	double answer;
	obj = new Conditional();
	clock_t startTime = clock();
	answer = obj->probability(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	double p4;

	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 6;
	p2 = 6;
	p3 = 12;
	p4 = 0.09090909090909091;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 6;
	p2 = 6;
	p3 = 6;
	p4 = 1.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 9;
	p2 = 3;
	p3 = 3;
	p4 = 1.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 3;
	p2 = 2;
	p3 = 4;
	p4 = 0.6;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
