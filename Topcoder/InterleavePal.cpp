#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

using namespace std;

int dp[51][51][51][51];
int lastS[51][26], lastT[51][26];
class InterleavePal {
public:
    string S, T;
    int getans(int s1, int e1, int s2, int e2){
        bool f1 = (s1<=e1), f2 = (s2<=e2);
        if(!f2 && !f1)return 0;
        if(!f1)
        	s1 = 1, e1 = 0;
        if(!f2)
        	s2 = 1, e2 = 0;

        if(dp[s1][e1][s2][e2] != 0){
        	return dp[s1][e1][s2][e2];
        }
        int &ret = dp[s1][e1][s2][e2];
        if(f1){
        	ret = max(ret, (s1!=lastS[e1][S[s1]-'A'])+1+getans(s1+1, lastS[e1][S[s1]-'A']-1, s2, e2));
        	if(f2)
        	ret = max(ret, (s2!=lastT[e2][T[s2]-'A'])+1+getans(s1+1, e1, s2, lastT[e2][T[s2]-'A']-1));

        	ret = max(ret, getans(s1+1, e1, s2, e2));
        }
        if(f2){
        	ret = max(ret, (s2!=lastT[e2][T[s2]-'A'])+1+getans(s1, e1, s2+1, lastT[e2][T[s2]-'A']-1));
        	if(f1)
        	ret = max(ret, (s1!=lastS[e1][S[s1]-'A'])+1+getans(s1, lastS[e1][S[s1]-'A']-1, s2+1, e2));

        	ret = max(ret, getans(s1, e1, s2+1, e2));
        }
//        cout<<s1<<" "<<e1<<" "<<s2<<" "<<e2<<endl;
//        cout<<ret<<endl;
        return ret;
    }
	int longestPal(string s, string t) {
		memset(dp, 0, sizeof(dp));
		for(int j = 0;j<26;j++)
			lastS[0][j] = lastT[0][j] = 100;
		S = s;
		T = t;
		for(int i = 0;i<s.size();i++){
			lastS[i][s[i]-'A'] = i;
			if(i)
			for(int j = 0;j<26;j++)if(j!=s[i]-'A')
				lastS[i][j] = lastS[i-1][j];
		}
		for(int i = 0;i<t.size();i++){
			lastT[i][t[i]-'A'] = i;
			if(i)
			for(int j = 0;j<26;j++)if(j!=t[i]-'A')
				lastT[i][j] = lastT[i-1][j];
		}
		return getans(0, s.length()-1, 0, t.length()-1);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	InterleavePal *obj;
	int answer;
	obj = new InterleavePal();
	clock_t startTime = clock();
	answer = obj->longestPal(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = "AA";
	p1 = "BB";
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "";
	p1 = "JAVA";
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "";
	p1 = "";
	p2 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "ONCEUPONATIMETHEREWASAYOUNGPROGRAMMERWHOLEARNED";
	p1 = "TOPROGRAMJOINEDTOPCODERANDEVENTUALLYBECAMERED";
	p2 = 9;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
