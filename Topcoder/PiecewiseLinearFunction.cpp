#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class PiecewiseLinearFunction {
    int check1(long long Y, vector<int> &pts)
    {
        int ret = 0;
        set<int> tmp;
        for(long long i=1;i<pts.size();i++)
        {
            long long y2y1 = (pts[i]-pts[i-1]);
            long long xx = (Y-pts[i-1])+i*y2y1;
            //double x = xx/double(y2y1);
            if(xx == (i+1)*y2y1)
                tmp.insert(i+1);
            else if(xx == i*y2y1)
                tmp.insert(i);
//            else if(x<i+1 && x>i)
            else if((xx < (i+1)*y2y1 && xx > i*y2y1) || (xx > (i+1)*y2y1 && xx < i*y2y1))
                ret ++;
        }
        return tmp.size() + ret;
    }
    int check2(long long Y1, long long Y2, vector<int> &pts)
    {
        int ret = 0;
        set<int> tmp;
        for(long long i=1;i<pts.size();i++)
        {
            long long y2y1 = (pts[i]-pts[i-1]);
            long long xx = (Y1+Y2-2*pts[i-1])+2*i*y2y1;
            if((xx < 2*(i+1)*y2y1 && xx > i*2*y2y1) || (xx > 2*(i+1)*y2y1 && xx < 2*i*y2y1))
                ret ++;
        }
        return tmp.size() + ret;
    }
public:
	int maximumSolutions(vector <int> Y) {
	    vector<int> Z(Y);
	    for(int i=1;i<Z.size();i++)
        {
            if(Z[i] == Z[i-1])
                return -1;
        }
        set<int> pos;
        set<int>::iterator it, it2;
        for(int i=0;i<Y.size();i++)
            pos.insert(Y[i]);
	    int ans = 0;
	    for(it = pos.begin(); it != pos.end(); it++)
        {
            ans = max(ans, check1(*it, Y));
            it2 = it;
            it2++;
            if(it2 != pos.end())
                ans = max(ans, check2(*it, *it2, Y));
        }
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	PiecewiseLinearFunction *obj;
	int answer;
	obj = new PiecewiseLinearFunction();
	clock_t startTime = clock();
	answer = obj->maximumSolutions(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {4,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {1,4,-1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {2,1,2,1,3,2,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {125612666,-991004227,0,6,88023,-1000000000,1000000000,-1000000000,1000000000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
