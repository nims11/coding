Knuth Morris Pratt String Matching

Matching Pattern P against S
Prefix Function -> pi[q] = max{k : k<q and P[1..k] is a proper suffix of P[1..q]}
		   In other words, length of the longest prefix of P[1..q] which is a suffix of P[1..q]

COMPUTE_PI(P):
	m = P.length
	pi[1] = 0
	k = 0
	for q = 2 to m:
		while k>0 and P[k+1] != P[q]:	# Find all ways of extending previous value of pi
			k = pi[k]
		if P[k+1] == P[q]:
			k++
		pi[q] = k
	return pi

KMP_MATCH(S, P):
	n = S.length
	m = P.length
	pi = COMPUTE_PI(P)
	q = 0
	for i = 1 to n
		while q>0 and P[q+1] != T[i]:
			q = pi[q]
		if P[q+1] == T[i]:
			q++
		if q == m:
			print "Pattern occur with shift " i-m
			q = pi[q]
