#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int sieve[32000];
void genPrimes(vector<int> &primes){
    sieve[2] = 0;
    primes.push_back(2);
    for(int i = 3;i<=32000;i+=2){
        if(sieve[i] == 0)
        {
            primes.push_back(i);
            if(i*1LL*i <= 32000)
            for(int j = i*i;j<=32000;j+=i)
                sieve[j] = 1;
        }
    }
}
long long POW(long long r, long long n)
{
    long long ans = 1;
    while(n>0)
    {
        if(n&1)
            ans = (ans*r);
        n >>= 1;
        r = (r*r);
    }
    return ans;
}
int getBase(long long n, int p){
    int st = 1, end = pow(n, 1.0/p)+2;
    while(st<=end){
//        if(p == 2)
//        cout<<st<<" "<<end<<endl;
        int mid = ((st+end)*1LL)/2;
        long long res = POW(mid, p);
        if(res<n)
            st = mid+1;
        else if(res > n)
            end = mid-1;
        else
            return mid;
    }

    return -1;
}

class DivisorsPower {
    vector<int> primes;
public:
    int noOfDiv(int n){
        int ret = 1;
        int lt = sqrt(n);
        for(int i = 0;i<primes.size() && primes[i]<=lt;i++){
            int cnt = 0;
            while(n%primes[i] == 0){
                n/=primes[i];
                cnt++;
            }
            ret *= (cnt+1);
        }
        if(n!= 1)
            ret *= 2;
        return ret;
    }
    DivisorsPower(){genPrimes(primes);}
	long long findArgument(long long n) {
	    int pow = 64;
	    int lastPow = -1, lastBase;
	    vector<pair<int, int> > bases;
	    while(pow>=2){
            int res = getBase(n, pow);
            if(res != -1)
                lastPow = pow, bases.push_back(make_pair(res, pow));
            pow--;
	    }

        for(int i = 0;i<bases.size();i++){
            cout<<bases[i].first<<" "<<bases[i].second<<" "<<noOfDiv(bases[i].first)<<endl;
            if(noOfDiv(bases[i].first) == bases[i].second)
                return bases[i].first;
        }
        return -1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	DivisorsPower *obj;
	long long answer;
	obj = new DivisorsPower();
	clock_t startTime = clock();
	answer = obj->findArgument(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	long long p0;
	long long p1;

	{
	// ----- test 0 -----
	p0 = 4ll;
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 10ll;
	p1 = -1ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 64ll;
	p1 = 4ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 10000ll;
	p1 = 10ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 2498388559757689ll;
	p1 = 49983883ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
