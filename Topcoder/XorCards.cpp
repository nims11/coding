#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class XorCards {
public:
    int fre(int A[64][64], int B[], int M, int N)
    {
        int ret = N;
        int vis[50] = {0};
        for(int j = 0; j < N; j++)
        {
            int i = 0;
            while(i<M && (A[i][j] == 0 || vis[i]))i++;
            if(i != M)
            {
                vis[i] = 1;
                for(int i2 = 0; i2 < M; i2++)
                    if(!vis[i2] && A[i2][j] == 1)
                    {
                        for(int j2 = j; j2 < N; j2++)
                            A[i2][j2] = (A[i2][j2]-A[i][j2]+2)%2;
                        B[i2] = (B[i2] - B[i] + 2)%2;
                    }
                ret--;
            }
        }
        for(int i = 0; i < M; i++)
            if(!vis[i] && B[i] != 0)
                return -1;
        return ret;
    }
    long long getans(vector<long long> &number, long long N, int bits)
    {
        int A[64][64], B[bits];
        for(int i = 0; i < bits; i++)
        {
            for(int j = 0; j < number.size(); j++)
                A[i][j] = (number[j]>>i)&1;
            B[i] = (N>>i)&1;
        }
        int fr = fre(A, B, bits, number.size());
        if(fr<0)
            return 0;
        return 1LL<<fr;
    }
	long long numberOfWays(vector <long long> number, long long limit) {
		long long ret = getans(number, limit, 64);
		int max_bits = 64;

		while(max_bits)
        {
            if(limit&1)
                ret += getans(number, limit^1, max_bits);
            limit >>= 1;
            for(int j = 0; j < number.size(); j++)
                number[j] >>= 1;
            max_bits--;
        }
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <long long> p0, long long p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	XorCards *obj;
	long long answer;
	obj = new XorCards();
	clock_t startTime = clock();
	answer = obj->numberOfWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <long long> p0;
	long long p1;
	long long p2;

	{
	// ----- test 0 -----
	long long t0[] = {1ll,2ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2ll;
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	long long t0[] = {5ll,5ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3ll;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	long long t0[] = {1ll,2ll,3ll,4ll,5ll,6ll,7ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5ll;
	p2 = 96ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	long long t0[] = {123ll,456ll,789ll,147ll,258ll,369ll,159ll,357ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 500ll;
	p2 = 125ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	long long t0[] = {0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000000000000000ll;
	p2 = 4294967296ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	long long t0[] = {1000000000000000ll,999999999999999ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 65535ll;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
