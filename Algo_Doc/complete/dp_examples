Interesting DP examples

- Given a string of numbers, calculate the number of ways to decode the string if [1-26] maps to [A-Z]

dp[i] = answer till length i
calculate this value according to dp[i-1], dp[i-2], str[i], str[i-1], str[i-2]


- Distinct Subsequences of a string

dp[i] -> answer till ith index
if no previous occurance of ith character, simply 2 times the previous dp state
else 2 times the previous dp minus the dp value before the previous occurance.

- Longest Common Subsequence
(len-LCS_len) = Least number of insertion/deletion to convert source->target
dp[i][0] = dp[0][i] = {0}
dp[i][j] = LCS of str1[0...i] and str2[0...j]
	 = dp[i-1][j-1]+1 if str1[i]==str2[j]
	 else max(dp[i][j-1] /*adding to str2*/
		, dp[i-1][j] /*adding to str1*/
		)

- Edit Distance Problem with Additional Swapping condition.

Algo is like normal Edit Distance + swapping condition
For swapping condition in dp[i][j], find latest occurance of source[i] in target[1...j-1]
Similarly find latest occurance of target[j] in source[1...i-1]
Swapping takes place in these pairs. To the dp value, add the cost of deletion of all the elements in between the pair of source
and add the cost of insertion of all the elements in between the pair of target.


- 
