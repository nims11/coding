#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SquareScores {
public:
	double calcexpectation(vector <int> p, string s) {
        while(p.size() < 26)
            p.push_back(0);
        double res = 0;
		int N = s.size();
        for(int i = 1;i<=N;i++){
            if(s[i-1] == '?'){
                for(int j = 0;j<26;j++){
                    s[i-1] = 'a'+j;
                    double curProb = p[j]/100.0;
                    for(int j = i;j>0;j--){
                        if(s[j-1] == s[i-1]){
                            res += curProb;
                        }else if(s[j-1] == '?'){
                            curProb *= p[s[i-1]-'a']/100.0;
                            res += curProb;
                        }else
                            break;
                    }
                }
                s[i-1] = '?';
            }else{
                double curProb = 1;
                for(int j = i;j>0;j--){
                    if(s[j-1] == s[i-1]){
                        res += curProb;
                    }else if(s[j-1] == '?'){
                        curProb *= p[s[i-1]-'a']/100.0;
                        res += curProb;
                    }else
                        break;
                }
            }
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, string p1, bool hasAnswer, double p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "\"" << p1 << "\"";
    cout << "]" << endl;
    SquareScores *obj;
    double answer;
    obj = new SquareScores();
    clock_t startTime = clock();
    answer = obj->calcexpectation(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p2 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <int> p0;
    string p1;
    double p2;

    {
        // ----- test 0 -----
        int t0[] = {1,99};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "aaaba";
        p2 = 8.0;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {10,20,70};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "aa?bbbb";
        p2 = 15.0;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {10,20,30,40};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "a?" "?c?dc?b";
        p2 = 11.117;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {25,25,21,2,2,25};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "a?" "?b?" "?" "?" "?" "?" "?" "?ff?" "?e";
        p2 = 21.68512690712425;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {4,4,4,3,4,4,4,4,4,4,3,4,4,4,3,4,4,4,4,4,4,4,3,4,4,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?" "?";
        p2 = 31.16931963781721;
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {4,3,4,3,8,2,4,3,4,4,3,2,4,4,3,4,2,4,7,6,4,4,3,4,4,3};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "makigotapresentfromniko";
        p2 = 23.0;
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
