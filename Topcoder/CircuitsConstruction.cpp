#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

//struct node{
//    int type;
//    int cnt;
//    int left, right;
//    node(int t){
//        type=  t;
//        cnt = 0;
//        left = right = -1;
//    }
//}nodes[1000000];
int cnt = 0;
pair<int, int> build(string &str, int idx){
    pair<int, int> ret;
    if(str[idx] == 'X')
        return make_pair(1, idx+1);
    char type = str[idx];
    pair<int, int> ret1 = build(str, idx+1);
    idx = ret1.second;
    pair<int, int> ret2 = build(str, idx);
    idx = ret2.second;
    if(type == 'A')
        return make_pair(ret1.first+ret2.first, idx);
    else
        return make_pair(max(ret1.first,ret2.first), idx);
}
class CircuitsConstruction {
public:
	int maximizeResistance(string circuit, vector <int> conductors) {
	    sort(conductors.begin(), conductors.end());
	    cnt = 0;
	    int res = build(circuit, 0).first;
	    int ret = 0;
	    for(int i = conductors.size()-1, j = 0;j<res;i--,j++)
            ret += conductors[i];
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	CircuitsConstruction *obj;
	int answer;
	obj = new CircuitsConstruction();
	clock_t startTime = clock();
	answer = obj->maximizeResistance(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	vector <int> p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = "BXBXX";
	int t1[] = {8,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 8;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = "AAXXAXAXX";
	int t1[] = {1,1,2,8,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 22;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = "AXBXX";
	int t1[] = {8,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 11;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = "BAAXBXXBXAXXBBAXXBXXAAXXX";
	int t1[] = {17,7,21,102,56,72,88,15,9,192,16,8,30};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 454;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
