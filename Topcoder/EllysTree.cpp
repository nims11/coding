#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

void dfs(int idx, stack<int> &res, vector<int> &deg, vector<vector<int> > &neigh, vector<int> &vis){
	vis[idx] = 1;
    cout<<idx<<endl;
	if(!deg[idx])res.push(idx);
	else{
		for(int i = 0;i<neigh[idx].size();i++){
			int v = neigh[idx][i];
			if(!vis[v]){
				deg[v]--;
				deg[idx]--;
				dfs(v, res, deg, neigh, vis);
			}
		}
	}
}

class EllysTree {
public:
	vector <int> getMoves(vector <int> parent) {
		vector<vector<int> > neigh;
		for(int i = 0;i<parent.size()+1;i++)
			neigh.push_back(vector<int> ());
		for(int i = 0;i<parent.size();i++){
			int u = i+1;
			int v = parent[i];
			while(1){
				neigh[u].push_back(v);
				neigh[v].push_back(u);
				u = v;
                if(u == 0)break;
				v = parent[u-1];
			}
		}
		for(int i = 0;i<neigh.size();i++)
			sort(neigh[i].begin(), neigh[i].end());
		int numodd = 0;
		for(int i = 0;i<neigh.size();i++)
			numodd += (neigh[i].size()%2);
        cout<<numodd<<endl;
		if((numodd != 0 && numodd != 2))
			return vector<int>();
		if(numodd == 2 && neigh[0].size() % 2 == 0)
			return vector<int>();
		stack<int> res;
		vector<int> deg(neigh.size()+1), vis(neigh.size()+1);
		for(int i = 0;i<=neigh.size();i++){
			deg[i] = neigh[i].size();
			vis[i] = 0;
		}
		dfs(0, res, deg, neigh, vis);
		vector<int> fin;
		while(!res.empty()){
			fin.push_back(res.top());
			res.pop();
		}
		return fin;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysTree *obj;
	vector <int> answer;
	obj = new EllysTree();
	clock_t startTime = clock();
	answer = obj->getMoves(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	int t0[] = {9,13,7,9,8,14,14,0,6,9,2,2,5,5,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,5,2,11,13,12,8,3,7,15,14,4,6,9,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3,4,5,0,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,6,6,2,6,1,3,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,4,1,3,7,6,5,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
