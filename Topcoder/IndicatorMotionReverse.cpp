#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
char trans[130][130];

string to_str(int n)
{
	string ret = "";

		{ret.push_back('0'+n/10);ret.push_back('0'+n%10);}
	return ret;
}
class IndicatorMotionReverse {
public:
	string getMinProgram(vector <string> actions) {
		trans['|']['N'] ='L';
		trans['N']['-'] ='L';
		trans['-']['/'] ='L';
		trans['/']['|'] ='L';
		
		trans['N']['|'] ='R';
		trans['-']['N'] ='R';
		trans['/']['-'] ='R';
		trans['|']['/'] ='R';
		
		trans['N']['N'] ='S';
		trans['-']['-'] ='S';
		trans['/']['/'] ='S';
		trans['|']['|'] ='S';
		
		trans['N']['/'] ='F';
		trans['-']['|'] ='F';
		trans['/']['N'] ='F';
		trans['|']['-'] ='F';
		string ip = "";
		for(int i = 0;i<actions.size();i++)
			ip += actions[i];
		reverse(ip.begin(), ip.end());
		int idx = 1;
		string ret = "";
		char pre = 0;
		int cnt = 0;
		vector<pair<char, int> > res;
		while(idx<ip.size())
		{
			if(cnt == 99)
			{
				res.push_back(make_pair(pre, cnt));
				cnt = 0;
			}
			if(cnt == 0)
			{
				pre = trans[ip[idx]][ip[idx-1]];
				cnt = 1;
			}else
			{
				if(pre == trans[ip[idx]][ip[idx-1]])
					cnt++;
				else
				{
					res.push_back(make_pair(pre, cnt));
					cnt = 1;
					pre = trans[ip[idx]][ip[idx-1]];;
				}
			}
			idx++;
		}
		if(cnt) res.push_back(make_pair(pre, cnt));
		for(int i = int(res.size())-1; i>=0;i--)
			ret += string(1, res[i].first) + to_str(res[i].second);
		if(ret.size() > 100)
		ret = ret.substr(0, 97) + "...";
		return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	IndicatorMotionReverse *obj;
	string answer;
	obj = new IndicatorMotionReverse();
	clock_t startTime = clock();
	answer = obj->getMinProgram(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"-|-|/-/|//////-/"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "F03R02L02R01S05R01L01";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"N"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"||||||||||||||||||||||||||||||||||||||||||||||||||","||||||||||||||||||||||||||||||||||||||||||||||||||","||||||||||||||||||||||||||||||||||||||||||||||||||"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "S50S99";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N","-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N-N"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L01R01L...";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
