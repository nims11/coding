#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
bool visited[10001]={0};
int max2[10001][2]={{0}};
int maxn=0;
int DFS(vector< vector <int> > &vertices, int n)
{
    visited[n]=true;
    for(int i=0;i<vertices[n].size();i++)
    {
        if(!visited[vertices[n][i]])
        {
            int x=DFS(vertices, vertices[n][i]);
            if(x>max2[n][0]){max2[n][1]=max2[n][0];max2[n][0]=x;}
            else if(max2[n][1]<x)max2[n][1]=x;
        }
    }
    int tmp=max2[n][0]+max2[n][1];
    if(tmp>maxn)
    maxn=tmp;
    return max2[n][0]+1;
}

class TheTree {
public:
	int maximumDiameter(vector <int> cnt) {
		vector< vector <int> > tree;
		tree.push_back(vector<int>());
		pair<int, int> curr_lvl = make_pair(0, -1);
		for(int i = 0; i<cnt.size(); i++)
        {
            if(cnt[i]){
                tree.push_back(vector<int> ());
                tree[curr_lvl.first].push_back(tree.size()-1);
                int tmp = tree.size()-1;
                cnt[i]--;
                if(cnt[i]){
                    tree.push_back(vector<int> ());
                    if(curr_lvl.second == -1)
                        tree[curr_lvl.first].push_back(tree.size()-1);
                    else
                    {
                        tree[curr_lvl.second].push_back(tree.size()-1);
                    }
                    cnt[i]--;
                    curr_lvl.second = tree.size()-1;
                }else
                    curr_lvl.second = -1;
                curr_lvl.first = tmp;

            }
        }
        for(int i = 0; i<=tree.size(); i++)
            visited[i] = 0, max2[i][0] = max2[i][1] = 0;
        maxn = 0;
        DFS(tree, 0);
        return maxn;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheTree *obj;
	int answer;
	obj = new TheTree();
	clock_t startTime = clock();
	answer = obj->maximumDiameter(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {4,1,2,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {4,2,1,3,2,5,7,2,4,5,2,3,1,13,6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 21;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
