#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
set<pair<int, int> > *globalBest;
int calcScore(int i, int j, vector<int> &x, vector<int> &y, vector<string> &a){
    int cur = 0;
    int n = a.size();
    int m = a[0].size();
    for(int k = 0;k<x.size();k++){
        int nx = x[k]+i,ny = y[k]+j;
        if(globalBest != NULL && globalBest->find(make_pair(nx, ny)) != globalBest->end())
            return -1;
        if(nx >=0 && nx < n && ny >=0 && ny < m)
            cur += a[nx][ny]-'0';
    }
    return cur;
}
int combScore(int i, int j, int i_, int j_, vector<int> &x, vector<int> &y, vector<string> &a){
    int cur = 0;
    int n = a.size();
    int m = a[0].size();
    set<pair<int, int> > xx;
    for(int k = 0;k<x.size();k++){
        int nx = x[k]+i,ny = y[k]+j;
        int nx_ = x[k]+i_, ny_ = y[k]+j_;
        if(nx >=0 && nx < n && ny >=0 && ny < m && xx.find(make_pair(nx, ny)) == xx.end())
            cur += a[nx][ny]-'0', xx.insert(make_pair(nx, ny));
        if(nx_ >=0 && nx_ < n && ny_ >=0 && ny_ < m && xx.find(make_pair(nx_, ny_)) == xx.end())
            cur += a[nx_][ny_]-'0', xx.insert(make_pair(nx_, ny_));
    }
    return cur;
}
class Coversta {
    public:
        int place(vector <string> a, vector <int> x, vector <int> y) {
            int n = a.size();
            int m = a[0].size();
            set<pair<int, int> > best;

            int maxi = 0;
            globalBest = NULL;
            for(int i = 0;i<n;i++){
                for(int j = 0;j<m;j++){
                    int cur = calcScore(i, j, x, y, a);
                    if(maxi < cur){
                        maxi = cur;
                        best.clear();
                        for(int k = 0;k<x.size();k++){
                            int nx = x[k]+i,ny = y[k]+j;
                            if(nx >=0 && nx < n && ny >=0 && ny < m)
                                best.insert(make_pair(nx, ny));
                        }
                    }
                }
            }
            int res = 0;
            for(int i = 0;i<n;i++){
                for(int j = 0;j<m;j++){
                    globalBest = &best;
                    int cur = calcScore(i, j, x, y, a);
                    if(cur != -1){
                        res = max(res, maxi + cur);
                    }
                }
            }
            vector<pair<int, int> > cand;
            for(set<pair<int, int> >::iterator it = best.begin(); it != best.end(); it++){
                cand.push_back(*it);
            }
            for(int ii = 0;ii<cand.size();ii++){
                for(int jj = ii;jj<cand.size();jj++){
                    for(int i = 0;i<x.size();i++){
                        int nx = cand[ii].first - x[i];
                        int ny = cand[ii].second - y[i];
                        if(nx >= 0 && nx < n && ny >= 0 && ny < m){
                            for(int j = 0;j<x.size();j++){
                                int nx_ = cand[jj].first - x[j];
                                int ny_ = cand[jj].second - y[j];
                                if(nx_ >= 0 && nx_ < n && ny_ >= 0 && ny_ < m){
                                    res = max(res, combScore(nx, ny, nx_, ny_, x, y, a));
                                }
                            }
                        }
                    }

                }
            }
            return res;
        }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	Coversta *obj;
	int answer;
	obj = new Coversta();
	clock_t startTime = clock();
	answer = obj->place(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"11","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"11","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"15","61"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 11;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"151","655","661"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0,-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 33;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"303","333","000"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-1,-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 12;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"0000000","1010101"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-1,-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {-1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 0;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"210","222"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, false, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
