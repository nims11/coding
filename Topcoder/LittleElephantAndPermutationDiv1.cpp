#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
const long long mod = 1000000007;
inline long long C2(long long n)
{
    return ((n*1LL*(n-1))/2)%mod;
}
class LittleElephantAndPermutationDiv1 {
public:
	int getNumber(int N, int K) {
		long long dp[2][N+1][K];
        for(int i = 0; i<=N; i++)
            for(int j = 0; j<K; j++)
                dp[0][i][j] = dp[1][i][j] = 0;
        dp[0][N][0] = 1;
        long long ret = 0;
        for(int i1 = 1; i1<= N; i1++)
        {
            int i = i1%2;
            for(int o2 = 0; o2 <= N; o2++)
            {
                for(int k = 0; k < K; k++)
                {
                    if(o2 > N-i1)
                        continue;
                    dp[i][o2][k] = 0;
                    int o1 = 2*(N - i1 - o2);
                    if(o1 > 2*i1 - (2*i1/N)*((2*i1)%N))
                        continue;
//                    cout<<i1<<" "<<o2<<" "<<k<<" "<<o1<<endl;

                    // o2
                    {
                        if(k-i1 >= 0)
                            dp[i][o2][k] = (dp[i][o2][k] + (o2+1)*1LL*dp[!i][o2+1][k-i1])%mod;
                    }

                    // o1 + o1
                    {
                        if(k-(i1<<1) >= 0)
                            dp[i][o2][k] = (dp[i][o2][k] + C2(o1+2)*dp[!i][o2][k-(i1<<1)])%mod;
                    }

                    // o1 + o2
                    {
                        if(k-i1 >= 0)
                            dp[i][o2][k] = (dp[i][o2][k] + o1*(o2+1)*1LL*dp[!i][o2+1][k-i1])%mod;
                    }

                    // o2 + o2
                    {
                        if(o2 + 2 <= N-i1+1)
                            dp[i][o2][k] = (dp[i][o2][k] + 2*C2(o2+2)*dp[!i][o2+2][k])%mod;
                    }
                    if(i1 == N)
                    {
                        ret += dp[i][o2][k];
                        ret %= mod;
                    }
//                    cout<<dp[i][o2][k]<<endl<<endl;
                }
            }
        }
        long long tot = 1;
        for(int i = 2; i<= N; i++)
            tot = (tot*1LL*i)%mod;
//        cout<<tot<<endl;
        tot = (tot*1LL*tot)%mod;
        return (tot-1LL*ret+mod)%mod;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	LittleElephantAndPermutationDiv1 *obj;
	int answer;
	obj = new LittleElephantAndPermutationDiv1();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 8;
	p2 = 18;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 74;
	p2 = 484682624;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 50;
	p1 = 1000;
	p2 = 539792695;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
