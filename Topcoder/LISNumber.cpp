#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int C[1300][1300];
const int mod = 1000000007;
class LISNumber {
public:
	int count(vector <int> cardsnum, int K) {
	    C[0][0] = 1;
		for(int i=1;i<1300;i++)
        {
            C[i][0] = 1;
            for(int j=1;j<1300;j++)
                C[i][j] = (C[i-1][j] + C[i-1][j-1])%mod;
        }
        int n = cardsnum.size();
        int tot = accumulate(cardsnum.begin(), cardsnum.end(), 0);
        int dp[K][n+1];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        for(int t = 1; t<=n ;t++)
        {
            tot -= cardsnum[t-1];
            for(int k = 0; k<K; k++)
            {
                int u = K-k, d = tot + 1 - u;
                dp[k][t] = 0;
                for(int i=0;i<=cardsnum[t-1] && i<=u;i++)
                {
                    for(int j=0;j<=cardsnum[t-1]-i && j<=d;j++)
                    {
                        int l = cardsnum[t-1]-i-j;
                        long long foo = (C[u][i]*1LL*C[d][j])%mod;
                        foo = (foo*C[cardsnum[t-1]-1][l])%mod;
                        if(k-j-l>=0)
                            foo = (foo*dp[k-j-l][t-1])%mod;
                        else
                            foo = 0;
                        dp[k][t] = (dp[k][t] + foo)%mod;
                    }
                }
            }
        }
        return dp[K-1][n];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	LISNumber *obj;
	int answer;
	obj = new LISNumber();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;
	int p2;

	{
	// ----- test 0 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {36,36,36,36,36};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {3,2,11,5,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	p2 = 474640725;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {31,4,15,9,26,5,35,8,9,7,9,32,3,8,4,6,26};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 58;
	p2 = 12133719;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {27,18,28,18,28,4,5,9,4,5,23,5,36,28,7,4,7,13,5,26,6,24,9,7,7,5,7,24,7,9,36,9,9,9,5,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 116;
	p2 = 516440918;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
