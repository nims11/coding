#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

int dp[101][2][2];
int field[101][2];
class YetAnotherCardGame {
public:
	int maxCards(vector <int> petr, vector <int> snuke) {
		sort(petr.begin(), petr.end());
        sort(snuke.begin(), snuke.end());
        for(int i = 0;i<=100;i++)field[i][0] = field[i][1] = 0;
        for(int i = 0;i<petr.size();i++)
            field[petr[i]][0]++, field[snuke[i]][1]++;
        int bal[2] = {0};
        for(int i = 0;i<=100;i++)
            for(int j = 0;j<2;j++)
            bal[j] += max(0, field[i][j] - 1);
        int cur = 0;
        while(!(field[cur][0] || field[cur][1])){
            cur++;
        }
        int chance = 0;
        if(field[cur][0] == 0){
            if(bal[0]){
                bal[0]--;
                chance = 1;
            }else{
                while(cur <= 100 && field[cur][0] == 0){
                    if(field[cur][1]) bal[1]++;
                    cur++;
                }
            }
        }
        cout<<cur<<" "<<chance<<endl;
        int ans = 0;
        while(cur <= 100){
            // if(field[cur][chance]){
                ans++;
                if(field[cur][!chance])
                    bal[!chance]++;
            // }
            cur++;

            chance = !chance;
            while(cur <= 100 && !(field[cur][0] || field[cur][1])){
                cur++;
            }
            if(cur > 100)break;
            if(field[cur][chance] == 0){
                if(bal[chance]){
                    bal[chance]--;
                    chance = !chance;
                }else{
                    while(cur <= 100 && field[cur][chance] == 0){
                        if(field[cur][!chance])bal[!chance]++;
                        cur++;
                    }
                }
            }
        }
        return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	YetAnotherCardGame *obj;
	int answer;
	obj = new YetAnotherCardGame();
	clock_t startTime = clock();
	answer = obj->maxCards(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {2,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,1,1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,4,6,7,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,7,1,5,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {19,99,86,30,98,68,73,92,37,69,93,28,58,36,86,32,46,34,71,29};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {28,29,22,75,78,75,39,41,5,14,100,28,51,42,9,25,12,59,98,83};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 28;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
